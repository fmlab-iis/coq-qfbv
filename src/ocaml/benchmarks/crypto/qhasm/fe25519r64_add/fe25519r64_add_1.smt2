(set-logic QF_BV)
(set-info :smt-lib-version 2.0)
(declare-fun y3_0 () (_ BitVec 64))
(declare-fun y2_0 () (_ BitVec 64))
(declare-fun y1_0 () (_ BitVec 64))
(declare-fun y0_0 () (_ BitVec 64))
(declare-fun x3_0 () (_ BitVec 64))
(declare-fun x2_0 () (_ BitVec 64))
(declare-fun x1_0 () (_ BitVec 64))
(declare-fun x0_0 () (_ BitVec 64))
(declare-fun r3_2 () (_ BitVec 64))
(declare-fun r3_1 () (_ BitVec 64))
(declare-fun r2_2 () (_ BitVec 64))
(declare-fun r2_1 () (_ BitVec 64))
(declare-fun r1_2 () (_ BitVec 64))
(declare-fun r1_1 () (_ BitVec 64))
(declare-fun r0_3 () (_ BitVec 64))
(declare-fun r0_2 () (_ BitVec 64))
(declare-fun r0_1 () (_ BitVec 64))
(declare-fun carry_8 () (_ BitVec 1))
(declare-fun carry_7 () (_ BitVec 1))
(declare-fun carry_6 () (_ BitVec 1))
(declare-fun carry_5 () (_ BitVec 1))
(declare-fun carry_4 () (_ BitVec 1))
(declare-fun carry_3 () (_ BitVec 1))
(declare-fun carry_2 () (_ BitVec 1))
(declare-fun carry_1 () (_ BitVec 1))
(declare-fun addt1_2 () (_ BitVec 64))
(declare-fun addt0_2 () (_ BitVec 64))
(assert true)
(assert (and (= carry_1 ((_ extract 64 64) (bvadd ((_ zero_extend 1) x0_0) ((_ zero_extend 1) y0_0)))) (= r0_1 ((_ extract 63 0) (bvadd ((_ zero_extend 1) x0_0) ((_ zero_extend 1) y0_0))))))
(assert (and (= carry_2 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x1_0) ((_ zero_extend 1) y1_0)) ((_ zero_extend 64) carry_1)))) (= r1_1 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x1_0) ((_ zero_extend 1) y1_0)) ((_ zero_extend 64) carry_1))))))
(assert (and (= carry_3 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x2_0) ((_ zero_extend 1) y2_0)) ((_ zero_extend 64) carry_2)))) (= r2_1 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x2_0) ((_ zero_extend 1) y2_0)) ((_ zero_extend 64) carry_2))))))
(assert (and (= carry_4 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x3_0) ((_ zero_extend 1) y3_0)) ((_ zero_extend 64) carry_3)))) (= r3_1 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x3_0) ((_ zero_extend 1) y3_0)) ((_ zero_extend 64) carry_3))))))
(assert (= addt1_2 (ite (= carry_4 #b1) #x0000000000000026 #x0000000000000000)))
(assert (and (= carry_5 ((_ extract 64 64) (bvadd ((_ zero_extend 1) r0_1) ((_ zero_extend 1) addt1_2)))) (= r0_2 ((_ extract 63 0) (bvadd ((_ zero_extend 1) r0_1) ((_ zero_extend 1) addt1_2))))))
(assert (and (= carry_6 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) r1_1) ((_ zero_extend 1) #x0000000000000000)) ((_ zero_extend 64) carry_5)))) (= r1_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) r1_1) ((_ zero_extend 1) #x0000000000000000)) ((_ zero_extend 64) carry_5))))))
(assert (and (= carry_7 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) r2_1) ((_ zero_extend 1) #x0000000000000000)) ((_ zero_extend 64) carry_6)))) (= r2_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) r2_1) ((_ zero_extend 1) #x0000000000000000)) ((_ zero_extend 64) carry_6))))))
(assert (and (= carry_8 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) r3_1) ((_ zero_extend 1) #x0000000000000000)) ((_ zero_extend 64) carry_7)))) (= r3_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) r3_1) ((_ zero_extend 1) #x0000000000000000)) ((_ zero_extend 64) carry_7))))))
(assert (= addt0_2 (ite (= carry_8 #b1) #x0000000000000026 #x0000000000000000)))
(assert (= r0_3 (bvadd r0_2 addt0_2)))
(assert (not (= (bvurem (bvadd (bvadd (bvmul ((_ zero_extend 256) x0_0) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) x1_0) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) x2_0) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) x3_0) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000))))) (bvadd (bvmul ((_ zero_extend 256) y0_0) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) y1_0) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) y2_0) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) y3_0) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000)))))) #x00000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED) (bvurem (bvadd (bvmul ((_ zero_extend 256) r0_3) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) r1_2) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) r2_2) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) r3_2) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000))))) #x00000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFED))))
(check-sat)
(exit)
