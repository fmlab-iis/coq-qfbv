(set-logic QF_BV)
(set-info :smt-lib-version 2.0)
(declare-fun x9_2 () (_ BitVec 64))
(declare-fun x8_2 () (_ BitVec 64))
(declare-fun x3l_2 () (_ BitVec 64))
(declare-fun x3l_1 () (_ BitVec 64))
(declare-fun x3_2 () (_ BitVec 64))
(declare-fun x3_1 () (_ BitVec 64))
(declare-fun x15l_2 () (_ BitVec 64))
(declare-fun x15l_1 () (_ BitVec 64))
(declare-fun x15h_1 () (_ BitVec 64))
(declare-fun x15_2 () (_ BitVec 64))
(declare-fun x15_1 () (_ BitVec 64))
(declare-fun x14l_2 () (_ BitVec 64))
(declare-fun x14l_1 () (_ BitVec 64))
(declare-fun x14h_1 () (_ BitVec 64))
(declare-fun x14_2 () (_ BitVec 64))
(declare-fun x14_1 () (_ BitVec 64))
(declare-fun x13l_2 () (_ BitVec 64))
(declare-fun x13l_1 () (_ BitVec 64))
(declare-fun x13h_1 () (_ BitVec 64))
(declare-fun x13_2 () (_ BitVec 64))
(declare-fun x13_1 () (_ BitVec 64))
(declare-fun x12h_1 () (_ BitVec 64))
(declare-fun x12_2 () (_ BitVec 64))
(declare-fun x12_1 () (_ BitVec 64))
(declare-fun x11_2 () (_ BitVec 64))
(declare-fun x10_2 () (_ BitVec 64))
(declare-fun odd_2 () (_ BitVec 1))
(declare-fun odd_1 () (_ BitVec 64))
(declare-fun m3_0 () (_ BitVec 64))
(declare-fun m2_0 () (_ BitVec 64))
(declare-fun m1_0 () (_ BitVec 64))
(declare-fun m0_0 () (_ BitVec 64))
(declare-fun dontcare_8 () (_ BitVec 64))
(declare-fun dontcare_7 () (_ BitVec 64))
(declare-fun dontcare_6 () (_ BitVec 64))
(declare-fun dontcare_5 () (_ BitVec 64))
(declare-fun dontcare_4 () (_ BitVec 64))
(declare-fun dontcare_3 () (_ BitVec 64))
(declare-fun dontcare_2 () (_ BitVec 64))
(declare-fun dontcare_1 () (_ BitVec 64))
(declare-fun carry_4 () (_ BitVec 1))
(declare-fun carry_3 () (_ BitVec 1))
(declare-fun carry_2 () (_ BitVec 1))
(declare-fun carry_1 () (_ BitVec 1))
(declare-fun a3_0 () (_ BitVec 64))
(declare-fun a2_0 () (_ BitVec 64))
(declare-fun a1_0 () (_ BitVec 64))
(declare-fun a0_0 () (_ BitVec 64))
(assert (and (and (and (and (= m0_0 #xFFFFFFFF00000001) (= m1_0 #x53BDA402FFFE5BFE)) (= m2_0 #x3339D80809A1D805)) (= m3_0 #x73EDA753299D7D48)) (bvult (bvadd (bvmul ((_ zero_extend 192) a0_0) #x0000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 192) a1_0) #x0000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 192) a2_0) #x0000000000000000000000000000000100000000000000000000000000000000) (bvmul ((_ zero_extend 192) a3_0) #x0000000000000001000000000000000000000000000000000000000000000000)))) (bvadd (bvmul ((_ zero_extend 192) m0_0) #x0000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 192) m1_0) #x0000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 192) m2_0) #x0000000000000000000000000000000100000000000000000000000000000000) (bvmul ((_ zero_extend 192) m3_0) #x0000000000000001000000000000000000000000000000000000000000000000)))))))
(assert (and (= carry_1 ((_ extract 64 64) (bvadd ((_ zero_extend 1) a0_0) ((_ zero_extend 1) m0_0)))) (= x12_1 ((_ extract 63 0) (bvadd ((_ zero_extend 1) a0_0) ((_ zero_extend 1) m0_0))))))
(assert (and (= carry_2 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a1_0) ((_ zero_extend 1) m1_0)) ((_ zero_extend 64) carry_1)))) (= x13_1 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a1_0) ((_ zero_extend 1) m1_0)) ((_ zero_extend 64) carry_1))))))
(assert (and (= carry_3 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a2_0) ((_ zero_extend 1) m2_0)) ((_ zero_extend 64) carry_2)))) (= x14_1 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a2_0) ((_ zero_extend 1) m2_0)) ((_ zero_extend 64) carry_2))))))
(assert (and (= carry_4 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a3_0) ((_ zero_extend 1) m3_0)) ((_ zero_extend 64) carry_3)))) (= x15_1 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a3_0) ((_ zero_extend 1) m3_0)) ((_ zero_extend 64) carry_3))))))
(assert (= x3_1 (bvadd (bvadd #x0000000000000000 #x0000000000000000) ((_ zero_extend 63) carry_4))))
(assert (= odd_1 (bvand a0_0 #x0000000000000001)))
(assert (= odd_2 ((_ extract 0 0) odd_1)))
(assert (= x12_2 (ite (= odd_2 #b1) x12_1 a0_0)))
(assert (= x13_2 (ite (= odd_2 #b1) x13_1 a1_0)))
(assert (= x14_2 (ite (= odd_2 #b1) x14_1 a2_0)))
(assert (= x15_2 (ite (= odd_2 #b1) x15_1 a3_0)))
(assert (= x3_2 (ite (= odd_2 #b1) x3_1 #x0000000000000000)))
(assert (and (= x12h_1 ((_ zero_extend 1) ((_ extract 63 1) x12_2))) (= dontcare_1 ((_ zero_extend 63) ((_ extract 0 0) x12_2)))))
(assert (and (= dontcare_2 ((_ zero_extend 1) ((_ extract 63 1) x13_2))) (= x13l_1 ((_ zero_extend 63) ((_ extract 0 0) x13_2)))))
(assert (= x13l_2 (bvshl x13l_1 #x000000000000003F)))
(assert (= x8_2 (bvadd x13l_2 x12h_1)))
(assert (and (= x13h_1 ((_ zero_extend 1) ((_ extract 63 1) x13_2))) (= dontcare_3 ((_ zero_extend 63) ((_ extract 0 0) x13_2)))))
(assert (and (= dontcare_4 ((_ zero_extend 1) ((_ extract 63 1) x14_2))) (= x14l_1 ((_ zero_extend 63) ((_ extract 0 0) x14_2)))))
(assert (= x14l_2 (bvshl x14l_1 #x000000000000003F)))
(assert (= x9_2 (bvadd x14l_2 x13h_1)))
(assert (and (= x14h_1 ((_ zero_extend 1) ((_ extract 63 1) x14_2))) (= dontcare_5 ((_ zero_extend 63) ((_ extract 0 0) x14_2)))))
(assert (and (= dontcare_6 ((_ zero_extend 1) ((_ extract 63 1) x15_2))) (= x15l_1 ((_ zero_extend 63) ((_ extract 0 0) x15_2)))))
(assert (= x15l_2 (bvshl x15l_1 #x000000000000003F)))
(assert (= x10_2 (bvadd x15l_2 x14h_1)))
(assert (and (= x15h_1 ((_ zero_extend 1) ((_ extract 63 1) x15_2))) (= dontcare_7 ((_ zero_extend 63) ((_ extract 0 0) x15_2)))))
(assert (and (= dontcare_8 ((_ zero_extend 1) ((_ extract 63 1) x3_2))) (= x3l_1 ((_ zero_extend 63) ((_ extract 0 0) x3_2)))))
(assert (= x3l_2 (bvshl x3l_1 #x000000000000003F)))
(assert (= x11_2 (bvadd x3l_2 x15h_1)))
(assert (not (bvult (bvadd (bvmul ((_ zero_extend 192) x8_2) #x0000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 192) x9_2) #x0000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 192) x10_2) #x0000000000000000000000000000000100000000000000000000000000000000) (bvmul ((_ zero_extend 192) x11_2) #x0000000000000001000000000000000000000000000000000000000000000000)))) (bvadd (bvmul ((_ zero_extend 192) m0_0) #x0000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 192) m1_0) #x0000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 192) m2_0) #x0000000000000000000000000000000100000000000000000000000000000000) (bvmul ((_ zero_extend 192) m3_0) #x0000000000000001000000000000000000000000000000000000000000000000)))))))
(check-sat)
(exit)
