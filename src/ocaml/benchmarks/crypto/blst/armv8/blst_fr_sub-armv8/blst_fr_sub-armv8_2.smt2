(set-logic QF_BV)
(set-info :smt-lib-version 2.0)
(declare-fun x9_3 () (_ BitVec 64))
(declare-fun x9_2 () (_ BitVec 64))
(declare-fun x8_3 () (_ BitVec 64))
(declare-fun x8_2 () (_ BitVec 64))
(declare-fun x7_2 () (_ BitVec 64))
(declare-fun x6_2 () (_ BitVec 64))
(declare-fun x5_2 () (_ BitVec 64))
(declare-fun x4_2 () (_ BitVec 64))
(declare-fun x3_1 () (_ BitVec 64))
(declare-fun x11_3 () (_ BitVec 64))
(declare-fun x11_2 () (_ BitVec 64))
(declare-fun x10_3 () (_ BitVec 64))
(declare-fun x10_2 () (_ BitVec 64))
(declare-fun dontcare_1 () (_ BitVec 1))
(declare-fun carry_7 () (_ BitVec 1))
(declare-fun carry_6 () (_ BitVec 1))
(declare-fun carry_5 () (_ BitVec 1))
(declare-fun carry_4 () (_ BitVec 1))
(declare-fun carry_3 () (_ BitVec 1))
(declare-fun carry_2 () (_ BitVec 1))
(declare-fun carry_1 () (_ BitVec 1))
(declare-fun b3_0 () (_ BitVec 64))
(declare-fun b2_0 () (_ BitVec 64))
(declare-fun b1_0 () (_ BitVec 64))
(declare-fun b0_0 () (_ BitVec 64))
(declare-fun a3_0 () (_ BitVec 64))
(declare-fun a2_0 () (_ BitVec 64))
(declare-fun a1_0 () (_ BitVec 64))
(declare-fun a0_0 () (_ BitVec 64))
(assert (and (bvult (bvadd (bvmul ((_ zero_extend 192) a0_0) #x0000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 192) a1_0) #x0000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 192) a2_0) #x0000000000000000000000000000000100000000000000000000000000000000) (bvmul ((_ zero_extend 192) a3_0) #x0000000000000001000000000000000000000000000000000000000000000000)))) (bvadd (bvmul ((_ zero_extend 192) #xFFFFFFFF00000001) #x0000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 192) #x53BDA402FFFE5BFE) #x0000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 192) #x3339D80809A1D805) #x0000000000000000000000000000000100000000000000000000000000000000) (bvmul ((_ zero_extend 192) #x73EDA753299D7D48) #x0000000000000001000000000000000000000000000000000000000000000000))))) (bvult (bvadd (bvmul ((_ zero_extend 192) b0_0) #x0000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 192) b1_0) #x0000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 192) b2_0) #x0000000000000000000000000000000100000000000000000000000000000000) (bvmul ((_ zero_extend 192) b3_0) #x0000000000000001000000000000000000000000000000000000000000000000)))) (bvadd (bvmul ((_ zero_extend 192) #xFFFFFFFF00000001) #x0000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 192) #x53BDA402FFFE5BFE) #x0000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 192) #x3339D80809A1D805) #x0000000000000000000000000000000100000000000000000000000000000000) (bvmul ((_ zero_extend 192) #x73EDA753299D7D48) #x0000000000000001000000000000000000000000000000000000000000000000)))))))
(assert (and (= carry_1 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a0_0) ((_ zero_extend 1) (bvnot b0_0))) #b00000000000000000000000000000000000000000000000000000000000000001))) (= x8_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a0_0) ((_ zero_extend 1) (bvnot b0_0))) #b00000000000000000000000000000000000000000000000000000000000000001)))))
(assert (and (= carry_2 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a1_0) ((_ zero_extend 1) (bvnot b1_0))) ((_ zero_extend 64) carry_1)))) (= x9_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a1_0) ((_ zero_extend 1) (bvnot b1_0))) ((_ zero_extend 64) carry_1))))))
(assert (and (= carry_3 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a2_0) ((_ zero_extend 1) (bvnot b2_0))) ((_ zero_extend 64) carry_2)))) (= x10_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a2_0) ((_ zero_extend 1) (bvnot b2_0))) ((_ zero_extend 64) carry_2))))))
(assert (and (= carry_4 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a3_0) ((_ zero_extend 1) (bvnot b3_0))) ((_ zero_extend 64) carry_3)))) (= x11_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a3_0) ((_ zero_extend 1) (bvnot b3_0))) ((_ zero_extend 64) carry_3))))))
(assert (= x3_1 (ite (= carry_4 #b1) #x0000000000000000 #xFFFFFFFFFFFFFFFF)))
(assert (= x4_2 (bvand #xFFFFFFFF00000001 x3_1)))
(assert (= x5_2 (bvand #x53BDA402FFFE5BFE x3_1)))
(assert (and (= carry_5 ((_ extract 64 64) (bvadd ((_ zero_extend 1) x8_2) ((_ zero_extend 1) x4_2)))) (= x8_3 ((_ extract 63 0) (bvadd ((_ zero_extend 1) x8_2) ((_ zero_extend 1) x4_2))))))
(assert (= x6_2 (bvand #x3339D80809A1D805 x3_1)))
(assert (and (= carry_6 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x9_2) ((_ zero_extend 1) x5_2)) ((_ zero_extend 64) carry_5)))) (= x9_3 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x9_2) ((_ zero_extend 1) x5_2)) ((_ zero_extend 64) carry_5))))))
(assert (= x7_2 (bvand #x73EDA753299D7D48 x3_1)))
(assert (and (= carry_7 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x10_2) ((_ zero_extend 1) x6_2)) ((_ zero_extend 64) carry_6)))) (= x10_3 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x10_2) ((_ zero_extend 1) x6_2)) ((_ zero_extend 64) carry_6))))))
(assert (and (= dontcare_1 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x11_2) ((_ zero_extend 1) x7_2)) ((_ zero_extend 64) carry_7)))) (= x11_3 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x11_2) ((_ zero_extend 1) x7_2)) ((_ zero_extend 64) carry_7))))))
(assert (not (= (bvsmod (bvsub (bvadd (bvmul ((_ zero_extend 256) x8_3) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) x9_3) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) x10_3) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) x11_3) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000))))) (bvsub (bvadd (bvmul ((_ zero_extend 256) a0_0) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) a1_0) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) a2_0) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) a3_0) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000))))) (bvadd (bvmul ((_ zero_extend 256) b0_0) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) b1_0) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) b2_0) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) b3_0) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000))))))) (bvadd (bvmul ((_ zero_extend 256) #xFFFFFFFF00000001) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) #x53BDA402FFFE5BFE) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) #x3339D80809A1D805) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) #x73EDA753299D7D48) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000)))))) #x00000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(check-sat)
(exit)
