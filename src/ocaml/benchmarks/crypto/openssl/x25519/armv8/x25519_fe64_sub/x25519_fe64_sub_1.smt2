(set-logic QF_BV)
(set-info :smt-lib-version 2.0)
(declare-fun x16_4 () (_ BitVec 64))
(declare-fun x16_3 () (_ BitVec 64))
(declare-fun x16_2 () (_ BitVec 64))
(declare-fun x16_1 () (_ BitVec 64))
(declare-fun x15_3 () (_ BitVec 64))
(declare-fun x15_2 () (_ BitVec 64))
(declare-fun x14_3 () (_ BitVec 64))
(declare-fun x14_2 () (_ BitVec 64))
(declare-fun x13_3 () (_ BitVec 64))
(declare-fun x13_2 () (_ BitVec 64))
(declare-fun x12_4 () (_ BitVec 64))
(declare-fun x12_3 () (_ BitVec 64))
(declare-fun x12_2 () (_ BitVec 64))
(declare-fun dontcare_2 () (_ BitVec 1))
(declare-fun dontcare_1 () (_ BitVec 1))
(declare-fun carry_8 () (_ BitVec 1))
(declare-fun carry_7 () (_ BitVec 1))
(declare-fun carry_6 () (_ BitVec 1))
(declare-fun carry_5 () (_ BitVec 1))
(declare-fun carry_4 () (_ BitVec 1))
(declare-fun carry_3 () (_ BitVec 1))
(declare-fun carry_2 () (_ BitVec 1))
(declare-fun carry_1 () (_ BitVec 1))
(declare-fun b3_0 () (_ BitVec 64))
(declare-fun b2_0 () (_ BitVec 64))
(declare-fun b1_0 () (_ BitVec 64))
(declare-fun b0_0 () (_ BitVec 64))
(declare-fun a3_0 () (_ BitVec 64))
(declare-fun a2_0 () (_ BitVec 64))
(declare-fun a1_0 () (_ BitVec 64))
(declare-fun a0_0 () (_ BitVec 64))
(assert true)
(assert (and (= carry_1 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a0_0) ((_ zero_extend 1) (bvnot b0_0))) #b00000000000000000000000000000000000000000000000000000000000000001))) (= x12_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a0_0) ((_ zero_extend 1) (bvnot b0_0))) #b00000000000000000000000000000000000000000000000000000000000000001)))))
(assert (and (= carry_2 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a1_0) ((_ zero_extend 1) (bvnot b1_0))) ((_ zero_extend 64) carry_1)))) (= x13_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a1_0) ((_ zero_extend 1) (bvnot b1_0))) ((_ zero_extend 64) carry_1))))))
(assert (and (= carry_3 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a2_0) ((_ zero_extend 1) (bvnot b2_0))) ((_ zero_extend 64) carry_2)))) (= x14_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a2_0) ((_ zero_extend 1) (bvnot b2_0))) ((_ zero_extend 64) carry_2))))))
(assert (and (= carry_4 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) a3_0) ((_ zero_extend 1) (bvnot b3_0))) ((_ zero_extend 64) carry_3)))) (= x15_2 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) a3_0) ((_ zero_extend 1) (bvnot b3_0))) ((_ zero_extend 64) carry_3))))))
(assert (and (= dontcare_1 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) #x0000000000000000) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_4)))) (= x16_1 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) #x0000000000000000) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_4))))))
(assert (= x16_2 (bvand x16_1 #x0000000000000026)))
(assert (and (= carry_5 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x12_2) ((_ zero_extend 1) (bvnot x16_2))) #b00000000000000000000000000000000000000000000000000000000000000001))) (= x12_3 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x12_2) ((_ zero_extend 1) (bvnot x16_2))) #b00000000000000000000000000000000000000000000000000000000000000001)))))
(assert (and (= carry_6 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x13_2) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_5)))) (= x13_3 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x13_2) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_5))))))
(assert (and (= carry_7 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x14_2) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_6)))) (= x14_3 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x14_2) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_6))))))
(assert (and (= carry_8 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) x15_2) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_7)))) (= x15_3 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) x15_2) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_7))))))
(assert (and (= dontcare_2 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) #x0000000000000000) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_8)))) (= x16_3 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) #x0000000000000000) ((_ zero_extend 1) (bvnot #x0000000000000000))) ((_ zero_extend 64) carry_8))))))
(assert (= x16_4 (bvand x16_3 #x0000000000000026)))
(assert (= x12_4 (bvsub x12_3 x16_4)))
(assert (not (= (bvsmod (bvsub (bvsub (bvadd (bvmul ((_ zero_extend 256) a0_0) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) a1_0) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) a2_0) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) a3_0) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000))))) (bvadd (bvmul ((_ zero_extend 256) b0_0) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) b1_0) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) b2_0) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) b3_0) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000)))))) (bvadd (bvmul ((_ zero_extend 256) x12_4) #x00000000000000000000000000000000000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 256) x13_3) #x00000000000000000000000000000000000000000000000000000000000000010000000000000000) (bvadd (bvmul ((_ zero_extend 256) x14_3) #x00000000000000000000000000000000000000000000000100000000000000000000000000000000) (bvadd (bvmul ((_ zero_extend 256) x15_3) #x00000000000000000000000000000001000000000000000000000000000000000000000000000000) (bvmul ((_ zero_extend 256) #x0000000000000000) #x00000000000000010000000000000000000000000000000000000000000000000000000000000000)))))) (bvsub #x00000000000000010000000000000000000000000000000000000000000000000000000000000000 #x00000000000000000000000000000000000000000000000000000000000000000000000000000026)) #x00000000000000000000000000000000000000000000000000000000000000000000000000000000)))
(check-sat)
(exit)
