(set-logic QF_BV)
(set-info :smt-lib-version 2.0)
(declare-fun tmp_2 () (_ BitVec 64))
(declare-fun tmp_1 () (_ BitVec 64))
(declare-fun sign_p_2 () (_ BitVec 64))
(declare-fun sign_p_1 () (_ BitVec 64))
(declare-fun sign_4 () (_ BitVec 1))
(declare-fun sign_3 () (_ BitVec 64))
(declare-fun sign_2 () (_ BitVec 1))
(declare-fun sign_1 () (_ BitVec 64))
(declare-fun rdx_8 () (_ BitVec 64))
(declare-fun rdx_7 () (_ BitVec 64))
(declare-fun rdx_6 () (_ BitVec 64))
(declare-fun rdx_4 () (_ BitVec 64))
(declare-fun rdx_3 () (_ BitVec 64))
(declare-fun rdx_2 () (_ BitVec 64))
(declare-fun rax_10 () (_ BitVec 64))
(declare-fun rax_8 () (_ BitVec 64))
(declare-fun rax_6 () (_ BitVec 64))
(declare-fun rax_4 () (_ BitVec 64))
(declare-fun rax_2 () (_ BitVec 64))
(declare-fun r8_2 () (_ BitVec 64))
(declare-fun carry_p_2 () (_ BitVec 64))
(declare-fun carry_p_1 () (_ BitVec 64))
(declare-fun carry2_2 () (_ BitVec 1))
(declare-fun carry2_1 () (_ BitVec 1))
(declare-fun carry0_2 () (_ BitVec 1))
(declare-fun carry0_1 () (_ BitVec 1))
(declare-fun carry_6 () (_ BitVec 1))
(declare-fun carry_5 () (_ BitVec 1))
(declare-fun carry_4 () (_ BitVec 1))
(declare-fun carry_3 () (_ BitVec 1))
(declare-fun carry_2 () (_ BitVec 1))
(declare-fun carry_1 () (_ BitVec 1))
(declare-fun L0x7fffffffdcf8_0 () (_ BitVec 64))
(declare-fun L0x7fffffffdcf0_0 () (_ BitVec 64))
(declare-fun L0x7fffffffdce8_0 () (_ BitVec 64))
(declare-fun L0x7fffffffdce0_0 () (_ BitVec 64))
(declare-fun L0x7fffffffdcd8_0 () (_ BitVec 64))
(declare-fun L0x7fffffffdcd0_0 () (_ BitVec 64))
(declare-fun L0x7fffffffdcc8_0 () (_ BitVec 64))
(declare-fun L0x7fffffffdcc0_0 () (_ BitVec 64))
(assert (and (and (and (bvult (bvadd (bvmul ((_ zero_extend 64) L0x7fffffffdcc0_0) #x00000000000000000000000000000001) (bvmul ((_ zero_extend 64) L0x7fffffffdcc8_0) #x00000000000000010000000000000000)) #x80000000000000000000000000000000) (bvult (bvadd (bvmul ((_ zero_extend 64) L0x7fffffffdcd0_0) #x00000000000000000000000000000001) (bvmul ((_ zero_extend 64) L0x7fffffffdcd8_0) #x00000000000000010000000000000000)) #x80000000000000000000000000000000)) (bvult (bvadd (bvmul ((_ zero_extend 64) L0x7fffffffdce0_0) #x00000000000000000000000000000001) (bvmul ((_ zero_extend 64) L0x7fffffffdce8_0) #x00000000000000010000000000000000)) #x80000000000000000000000000000000)) (bvult (bvadd (bvmul ((_ zero_extend 64) L0x7fffffffdcf0_0) #x00000000000000000000000000000001) (bvmul ((_ zero_extend 64) L0x7fffffffdcf8_0) #x00000000000000010000000000000000)) #x80000000000000000000000000000000)))
(assert (and (= carry_1 ((_ extract 64 64) (bvsub ((_ zero_extend 1) L0x7fffffffdcc0_0) ((_ zero_extend 1) L0x7fffffffdce0_0)))) (= rax_2 ((_ extract 63 0) (bvsub ((_ zero_extend 1) L0x7fffffffdcc0_0) ((_ zero_extend 1) L0x7fffffffdce0_0))))))
(assert (and (= carry_2 ((_ extract 64 64) (bvsub ((_ zero_extend 1) L0x7fffffffdcc8_0) (bvadd ((_ zero_extend 1) L0x7fffffffdce8_0) ((_ zero_extend 64) carry_1))))) (= rdx_2 ((_ extract 63 0) (bvsub ((_ zero_extend 1) L0x7fffffffdcc8_0) (bvadd ((_ zero_extend 1) L0x7fffffffdce8_0) ((_ zero_extend 64) carry_1)))))))
(assert (and (= sign_1 ((_ zero_extend 63) ((_ extract 63 63) rdx_2))) (= tmp_1 ((_ zero_extend 1) ((_ extract 62 0) rdx_2)))))
(assert (and (= carry0_1 ((_ extract 64 64) (bvsub ((_ zero_extend 1) #x0000000000000000) ((_ zero_extend 1) sign_1)))) (= rdx_3 ((_ extract 63 0) (bvsub ((_ zero_extend 1) #x0000000000000000) ((_ zero_extend 1) sign_1))))))
(assert true)
(assert true)
(assert (= sign_2 ((_ extract 0 0) sign_1)))
(assert true)
(assert true)
(assert (and (= carry_3 ((_ extract 64 64) (bvadd ((_ zero_extend 1) rax_2) ((_ zero_extend 1) rdx_3)))) (= rax_4 ((_ extract 63 0) (bvadd ((_ zero_extend 1) rax_2) ((_ zero_extend 1) rdx_3))))))
(assert (and (= carry2_1 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) rdx_2) ((_ zero_extend 1) rdx_3)) ((_ zero_extend 64) carry_3)))) (= rdx_4 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) rdx_2) ((_ zero_extend 1) rdx_3)) ((_ zero_extend 64) carry_3))))))
(assert true)
(assert true)
(assert (= rax_6 (bvand #x7FFFFFFFFFFFFFFF rdx_4)))
(assert (= sign_p_1 ((_ zero_extend 63) sign_2)))
(assert (= carry_p_1 ((_ zero_extend 63) carry_3)))
(assert true)
(assert true)
(assert (and (= carry_4 ((_ extract 64 64) (bvsub ((_ zero_extend 1) L0x7fffffffdcd0_0) ((_ zero_extend 1) L0x7fffffffdcf0_0)))) (= rax_8 ((_ extract 63 0) (bvsub ((_ zero_extend 1) L0x7fffffffdcd0_0) ((_ zero_extend 1) L0x7fffffffdcf0_0))))))
(assert (and (= carry_5 ((_ extract 64 64) (bvsub ((_ zero_extend 1) L0x7fffffffdcd8_0) (bvadd ((_ zero_extend 1) L0x7fffffffdcf8_0) ((_ zero_extend 64) carry_4))))) (= rdx_6 ((_ extract 63 0) (bvsub ((_ zero_extend 1) L0x7fffffffdcd8_0) (bvadd ((_ zero_extend 1) L0x7fffffffdcf8_0) ((_ zero_extend 64) carry_4)))))))
(assert (and (= sign_3 ((_ zero_extend 63) ((_ extract 63 63) rdx_6))) (= tmp_2 ((_ zero_extend 1) ((_ extract 62 0) rdx_6)))))
(assert (and (= carry0_2 ((_ extract 64 64) (bvsub ((_ zero_extend 1) #x0000000000000000) ((_ zero_extend 1) sign_3)))) (= rdx_7 ((_ extract 63 0) (bvsub ((_ zero_extend 1) #x0000000000000000) ((_ zero_extend 1) sign_3))))))
(assert true)
(assert true)
(assert (= sign_4 ((_ extract 0 0) sign_3)))
(assert true)
(assert true)
(assert (and (= carry_6 ((_ extract 64 64) (bvadd ((_ zero_extend 1) rax_8) ((_ zero_extend 1) rdx_7)))) (= rax_10 ((_ extract 63 0) (bvadd ((_ zero_extend 1) rax_8) ((_ zero_extend 1) rdx_7))))))
(assert (and (= carry2_2 ((_ extract 64 64) (bvadd (bvadd ((_ zero_extend 1) rdx_6) ((_ zero_extend 1) rdx_7)) ((_ zero_extend 64) carry_6)))) (= rdx_8 ((_ extract 63 0) (bvadd (bvadd ((_ zero_extend 1) rdx_6) ((_ zero_extend 1) rdx_7)) ((_ zero_extend 64) carry_6))))))
(assert true)
(assert true)
(assert (= r8_2 (bvand rdx_8 #x7FFFFFFFFFFFFFFF)))
(assert (= sign_p_2 ((_ zero_extend 63) sign_4)))
(assert (= carry_p_2 ((_ zero_extend 63) carry_6)))
(assert true)
(assert true)
(assert (not (= (bvsmod (bvsub (bvsub (bvadd (bvmul ((_ zero_extend 128) L0x7fffffffdcd0_0) #x000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 128) L0x7fffffffdcd8_0) #x000000000000000000000000000000010000000000000000) (bvmul ((_ zero_extend 128) #x0000000000000000) #x000000000000000100000000000000000000000000000000))) (bvadd (bvmul ((_ zero_extend 128) L0x7fffffffdcf0_0) #x000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 128) L0x7fffffffdcf8_0) #x000000000000000000000000000000010000000000000000) (bvmul ((_ zero_extend 128) #x0000000000000000) #x000000000000000100000000000000000000000000000000)))) (bvadd (bvmul ((_ zero_extend 128) rax_10) #x000000000000000000000000000000000000000000000001) (bvadd (bvmul ((_ zero_extend 128) r8_2) #x000000000000000000000000000000010000000000000000) (bvmul ((_ zero_extend 128) #x0000000000000000) #x000000000000000100000000000000000000000000000000)))) #x00000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) #x000000000000000000000000000000000000000000000000)))
(check-sat)
(exit)
